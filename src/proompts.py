test_proompts = {
    "create_test": """Мне нужно проверить свои знания.
Составь для меня тест. Вот характеристики теста:
Предмет: {subject};
Тема: {theme};
Количество вопросов: {number_of_questions};
Тип вопросов: {question_type};
Сложность: {difficulty};
Рассчитанное время: {time}.
Ответы на вопросы сразу не показывай""",

    "take_test": """У меня есть тест из нескольких вопросов:
{test_content}

Я буду отправлять ответы на эти вопросы. Твоя роль - проверяющий,
ты должен проверять и оценивать правильность моих ответов по правилам,
описанным ниже.

Напиши в каком формате ты ждешь ответы на вопросы и жди моих ответов.

Когда я напишу "Завершить тест", сначала напомни мои ответы,
затем, напиши где я ошибся, какие были правильные ответы и почему.
Затем напиши количество моих правильных ответов в формате:
"[кол-во правильных ответов/кол-во вопросов]" (символы [ и ] тоже включай в сообщение)

У меня должна быть возможность завершить тест и проверить ответы даже если я не ответил на все вопросы.
В данном случае, считай, что на вопросы, на которые я не дал ответ, я ответил неправильно.

Пока я не напишу "Завершить тест", не проверяй мои ответы, то есть не пиши,
какие ответы правильные, а какие - нет.

Не галлюцинируй
""",

    "train": """Мне нужно проверить свои знания.
Не мог бы ты задавать мне по одному вопросу с такими параметрами:
Предмет: {subject},
Тема: {theme},
Тип вопросов: {question_type},
Сложность: {difficulty}

После того как я дам ответ, проверь правильный он или нет и напиши мне об этом.
Если ответ не правильный, объясни в чем ошибка,
какой ответ правильный и почему.

Когда я попрошу, задавай следующий вопрос.
Мое сообщение "Следующий вопрос" будет значить,
что надо задавать новый вопрос.

Если я напишу "Объясни", ты должен сказать какой правильный ответ на последний вопрос
и объяснить почему.
"""
}

def get_proompt(key: str) -> str:
    return test_proompts[key]
